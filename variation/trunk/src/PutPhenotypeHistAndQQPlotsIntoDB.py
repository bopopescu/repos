#!/usr/bin/env python
"""
Examples:
	PutPhenotypeHistAndQQPlotsIntoDB.py -i /Network/Data/250k/tmp-bvilhjal/qq_plots -l 29 -c
	
Description:
	2009-2-17 Program to put phenotype histograms and qq plots generated by bjarni into db.
	
"""

import sys, os, math
bit_number = math.log(sys.maxint)/math.log(2)
if bit_number>40:       #64bit
	sys.path.insert(0, os.path.expanduser('~/lib64/python'))
	sys.path.insert(0, os.path.join(os.path.expanduser('~/script64')))
else:   #32bit
	sys.path.insert(0, os.path.expanduser('~/lib/python'))
	sys.path.insert(0, os.path.join(os.path.expanduser('~/script')))

import time, csv, getopt
import warnings, traceback
from pymodule import PassingData, figureOutDelimiter
from pymodule.db import formReadmeObj
import Stock_250kDB
import re
from PIL import Image
from cStringIO import StringIO

class PutPhenotypeHistAndQQPlotsIntoDB(object):
	__doc__ = __doc__
	option_default_dict = {('drivername', 1,):['mysql', 'v', 1, 'which type of database? mysql or postgres', ],\
							('hostname', 1, ): ['papaya.usc.edu', 'z', 1, 'hostname of the db server', ],\
							('dbname', 1, ): ['stock_250k', 'd', 1, 'database name', ],\
							('schema', 0, ): [None, 'k', 1, 'database schema name', ],\
							('db_user', 1, ): [None, 'u', 1, 'database username', ],\
							('db_passwd', 1, ): [None, 'p', 1, 'database password', ],\
							('input_dir', 1, ):[None, 'i', 1, 'the directory containing phenotype histograms, qq plots'],\
							('call_method_id', 1, int):[0, 'l', 1, 'Restrict results based on this call_method. Default is no such restriction.'],\
							('commit', 0, int):[0, 'c', 0, 'commit the db operation. this commit happens after every db operation, not wait till the end.'],\
							('debug', 0, int):[0, 'b', 0, 'toggle debug mode'],\
							('report', 0, int):[0, 'r', 0, 'toggle report, more verbose stdout/stderr.']}
	
	def __init__(self,  **keywords):
		"""
		2009-2-16
		"""
		from pymodule import ProcessOptions
		self.ad = ProcessOptions.process_function_arguments(keywords, self.option_default_dict, error_doc=self.__doc__, class_to_have_attr=self)
	
	re_plotfname = re.compile(r'(\d+)_.*_(qqplot|qqplot_log|hist_logTransformed|hist).png')
	
	def getImageFromFile(self, input_dir, fname):
		"""
		2009-2-17
		"""
		path = os.path.join(input_dir, fname)
		inf = open(path)
		im = Image.open(path)
		img = PassingData()
		s = StringIO()
		im.save(s, 'PNG')
		img.data = s.getvalue()
		
		im.thumbnail((256,256), Image.ANTIALIAS)
		s = StringIO()
		im.save(s, 'PNG')
		img.thumb_data = s.getvalue()
		
		img.filename = path
		del im
		return img
	
	def savePlots(self, session, input_dir, call_method_id):
		"""
		2009-2-17
			fix the bug so that it works even if some of phenotype histogram and(or) qq plot is in db
		2009-2-17
		"""
		files = os.listdir(input_dir)
		sys.stderr.write("Saving plots: %d files to be processed ...\n"%len(files))
		files.sort()	#in phenotype_method_id order as phenotype_method_id is the first character of each file.
		pheno_entry = None
		call_phen_entry = None
		prev_phenotype_method_id = None
		pheno_hist_in_db = 0
		call_phen_in_db = 0
		
		for i in range(len(files)):
			fname = files[i]
			sys.stderr.write("%d/%d:\t%s\n"%(i+1,len(files),fname))
			re_search_result = self.re_plotfname.search(fname)
			pheno_hist_in_db = 0
			call_phen_in_db = 0
			if re_search_result:
				phenotype_method_id, plot_type = re_search_result.groups()
				phenotype_method_id = int(phenotype_method_id)
				
				#check if it's in db or not
				pheno_query = Stock_250kDB.PhenotypeHistPlots.query.filter_by(phenotype_method_id=phenotype_method_id).all()
				call_phen_query = Stock_250kDB.CallPhenotypeQQPlots.query.filter_by(phenotype_method_id=phenotype_method_id).filter_by(call_method_id=call_method_id).all()
				if pheno_query and call_phen_query:
					continue
				elif pheno_query:
					pheno_hist_in_db = 1
				elif call_phen_query:
					call_phen_in_db = 1
				
				if prev_phenotype_method_id==None:
					if not pheno_hist_in_db:
						pheno_entry = Stock_250kDB.PhenotypeHistPlots(phenotype_method_id=phenotype_method_id)
					else:
						pheno_entry = PassingData()
					if not call_phen_in_db:
						call_phen_entry = Stock_250kDB.CallPhenotypeQQPlots(phenotype_method_id=phenotype_method_id, call_method_id=call_method_id)
					else:
						call_phen_entry = PassingData()
					prev_phenotype_method_id = phenotype_method_id
				elif prev_phenotype_method_id!=phenotype_method_id:	#different phenotype here
					if pheno_entry:
						if hasattr(pheno_entry, 'phenotype_method_id'):
							session.save_or_update(pheno_entry)
						if not pheno_hist_in_db:
							pheno_entry = Stock_250kDB.PhenotypeHistPlots(phenotype_method_id=phenotype_method_id)
						else:
							pheno_entry = PassingData()
					if call_phen_entry:
						if hasattr(call_phen_entry, 'phenotype_method_id'):
							session.save_or_update(call_phen_entry)
						if not call_phen_in_db:
							call_phen_entry = Stock_250kDB.CallPhenotypeQQPlots(phenotype_method_id=phenotype_method_id, call_method_id=call_method_id)
						else:
							call_phen_entry = PassingData()
					prev_phenotype_method_id = phenotype_method_id
				img = self.getImageFromFile(input_dir, fname)
				if plot_type=='qqplot':
					call_phen_entry.qq_thumb = img.thumb_data
					call_phen_entry.qq_plot = img.data
					call_phen_entry.qq_plot_fname = img.filename
				elif plot_type=='qqplot_log':
					call_phen_entry.qq_log_thumb = img.thumb_data
					call_phen_entry.qq_log_plot = img.data
				elif plot_type=='hist':
					pheno_entry.hist_thumb = img.thumb_data
					pheno_entry.hist_plot = img.data
					pheno_entry.hist_plot_fname = img.filename
				elif plot_type=='hist_logTransformed':
					pheno_entry.hist_log_thumb = img.thumb_data
					pheno_entry.hist_log_plot = img.data
		#don't forget the last file if it contains plot we want
		if pheno_entry and hasattr(pheno_entry, 'phenotype_method_id'):
			session.save_or_update(pheno_entry)
		if call_phen_entry and hasattr(call_phen_entry, 'phenotype_method_id'):
			session.save_or_update(call_phen_entry)
		sys.stderr.write("Done.\n")
	
	def run(self):
		"""
		"""
		if self.debug:
			import pdb
			pdb.set_trace()
		db = Stock_250kDB.Stock_250kDB(drivername=self.drivername, username=self.db_user,
				   password=self.db_passwd, hostname=self.hostname, database=self.dbname, schema=self.schema)
		db.setup(create_tables=False)
		session = db.session
		session.begin()
		
		self.savePlots(session, self.input_dir, self.call_method_id)
		
		if self.commit:
			session.flush()
			session.commit()
			session.clear()
		else:
			session.rollback()

if __name__ == '__main__':
	from pymodule import ProcessOptions
	main_class = PutPhenotypeHistAndQQPlotsIntoDB
	po = ProcessOptions(sys.argv, main_class.option_default_dict, error_doc=main_class.__doc__)
	
	instance = main_class(**po.long_option2value)
	instance.run()